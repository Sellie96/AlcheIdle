import { OnModuleInit } from '@nestjs/common';
import { OnGatewayConnection, OnGatewayDisconnect } from '@nestjs/websockets';
import { Socket } from 'dgram';
import { AuthService } from 'src/auth/strategies/service/auth.service';
import { UserService } from 'src/user/service/user.service';
import { Server } from 'typeorm';
import { MessageI } from '../model/message/message.interface';
import { PageI } from '../model/page.interface';
import { RoomI } from '../model/room/room.interface';
import { ConnectedUserService } from '../service/connected-user/connected-user.service';
import { JoinedRoomService } from '../service/joined-room/joined-room.service';
import { MessageService } from '../service/message/message.service';
import { RoomService } from '../service/room/room.service';
export declare class ChatGateway implements OnGatewayConnection, OnGatewayDisconnect, OnModuleInit {
    private authService;
    private userService;
    private roomService;
    private connectedUserService;
    private joinedRoomService;
    private messageService;
    server: Server;
    constructor(authService: AuthService, userService: UserService, roomService: RoomService, connectedUserService: ConnectedUserService, joinedRoomService: JoinedRoomService, messageService: MessageService);
    onModuleInit(): Promise<void>;
    handleConnection(socket: Socket): Promise<any>;
    handleDisconnect(socket: Socket): Promise<void>;
    private disconnect;
    onCreateRoom(socket: Socket, room: RoomI): Promise<void>;
    onPaginateRoom(socket: Socket, page: PageI): Promise<any>;
    onJoinRoom(socket: Socket, room: RoomI): Promise<void>;
    onLeaveRoom(socket: Socket): Promise<void>;
    onAddMessage(socket: Socket, message: MessageI): Promise<void>;
    private handleIncomingPageRequest;
}
